#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h> // Pour strcasecmp

#define MAX_PRODUCTS 100
#define FILE_NAME "stock.txt"

// Structure représentant un produit
typedef struct {
    int id;
    char name[50];
    int quantity;
    float price;
} Product;

Product inventory[MAX_PRODUCTS]; // Tableau pour stocker les produits
int productCount = 0;            // Compteur du nombre de produits

// Fonction pour vider le buffer d'entrée
void clearInputBuffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}

// Fonction pour demander confirmation
int confirmContinue() {
    char response[10];
    while (1) {
        printf("Souhaitez-vous continuer ? (o/n) : ");
        fgets(response, sizeof(response), stdin);
        response[strcspn(response, "\n")] = '\0';

        if (strcasecmp(response, "o") == 0 || strcasecmp(response, "oui") == 0) {
            return 1;
        } else if (strcasecmp(response, "n") == 0 || strcasecmp(response, "non") == 0) {
            return 0;
        } else {
            printf("Réponse invalide. Tapez 'o' pour oui ou 'n' pour non.\n");
        }
    }
}

// Charger les produits depuis le fichier
void loadFromFile() {
    FILE *file = fopen(FILE_NAME, "r");
    if (!file) return;

    while (productCount < MAX_PRODUCTS &&
           fscanf(file, "%d %s %d %f",
                  &inventory[productCount].id,
                  inventory[productCount].name,
                  &inventory[productCount].quantity,
                  &inventory[productCount].price) == 4) {
        productCount++;
    }

    fclose(file);
    printf("Données chargées depuis '%s'.\n", FILE_NAME);
}

// Sauvegarder les produits dans le fichier
void saveToFile() {
    FILE *file = fopen(FILE_NAME, "w");
    if (!file) {
        printf("Impossible d'ouvrir le fichier pour l'écriture.\n");
        return;
    }

    for (int i = 0; i < productCount; i++) {
        fprintf(file, "%d %s %d %.2f\n",
                inventory[i].id,
                inventory[i].name,
                inventory[i].quantity,
                inventory[i].price);
    }

    fclose(file);
    printf("Données sauvegardées dans '%s'.\n", FILE_NAME);
}

// Réinitialiser le fichier de stock
void resetStockFile() {
    char confirm[10];

    printf("⚠️ Êtes-vous sûr de vouloir réinitialiser le fichier de stock ? (o/n) : ");
    fgets(confirm, sizeof(confirm), stdin);
    confirm[strcspn(confirm, "\n")] = '\0';

    if (strcasecmp(confirm, "o") != 0 && strcasecmp(confirm, "oui") != 0) {
        printf("Réinitialisation annulée.\n");
        return;
    }

    // Supprime le fichier s'il existe
    if (remove(FILE_NAME) == 0) {
        printf("Fichier '%s' supprimé.\n", FILE_NAME);
    } else {
        printf("Aucun fichier trouvé. Création d’un nouveau fichier.\n");
    }

    // Recrée un fichier vide
    FILE *file = fopen(FILE_NAME, "w");
    if (!file) {
        printf("Impossible de créer un nouveau fichier !\n");
        return;
    }
    fclose(file);

    // Réinitialise la liste en mémoire
    productCount = 0;
    printf("Le stock a été réinitialisé avec succès.\n");
}

// Afficher le menu principal
void displayMenu() {
    printf("\n=== GESTION DE STOCK ===\n");
    printf("1. Ajouter un produit\n");
    printf("2. Afficher tous les produits\n");
    printf("3. Mettre à jour la quantité d'un produit\n");
    printf("4. Rechercher un produit par ID\n");
    printf("5. Supprimer un produit par ID\n");
    printf("6. Réinitialiser le fichier de stock\n");
    printf("7. Quitter\n");
    printf("Choisissez une option: ");
}

// Trouver un produit par ID
int findProductIndex(int id) {
    for (int i = 0; i < productCount; i++) {
        if (inventory[i].id == id) {
            return i;
        }
    }
    return -1;
}

// Fonction pour lire une chaîne de caractères avec annulation possible
int safeInput(char *buffer, size_t size) {
    if (fgets(buffer, size, stdin) == NULL) {
        return 0; // Erreur ou interruption
    }
    buffer[strcspn(buffer, "\n")] = '\0'; // Retirer le saut de ligne
    return 1;
}

// Ajouter un produit
void addProduct() {
    if (productCount >= MAX_PRODUCTS) {
        printf("Impossible d'ajouter plus de produits. Stock plein.\n");
        return;
    }

    Product newProduct;
    char input[50];

    // Étape 1 : ID
    printf("Entrez l'ID du produit: ");
    safeInput(input, sizeof(input));
    newProduct.id = atoi(input);

    // Vérifier unicité de l'ID
    for (int i = 0; i < productCount; i++) {
        if (inventory[i].id == newProduct.id) {
            printf("Un produit avec cet ID existe déjà !\n");
            return;
        }
    }

    printf("Étape 1 : ID = %d\n", newProduct.id);
    if (!confirmContinue()) return;

    // Étape 2 : Nom
    printf("Entrez le nom du produit: ");
    safeInput(newProduct.name, sizeof(newProduct.name));
    printf("Étape 2 : Nom = %s\n", newProduct.name);
    if (!confirmContinue()) return;

    // Étape 3 : Quantité
    printf("Entrez la quantité en stock: ");
    safeInput(input, sizeof(input));
    newProduct.quantity = atoi(input);
    printf("Étape 3 : Quantité = %d\n", newProduct.quantity);
    if (!confirmContinue()) return;

    // Étape 4 : Prix
    printf("Entrez le prix du produit: ");
    safeInput(input, sizeof(input));
    newProduct.price = atof(input);
    printf("Étape 4 : Prix = %.2f\n", newProduct.price);
    if (!confirmContinue()) return;

    inventory[productCount++] = newProduct;
    saveToFile();
    printf("Produit ajouté avec succès !\n");
}

// Afficher tous les produits
void displayAllProducts() {
    if (productCount == 0) {
        printf("Aucun produit dans le stock.\n");
        return;
    }

    printf("\nListe des produits:\n");
    for (int i = 0; i < productCount; i++) {
        printf("ID: %d | Nom: %s | Quantité: %d | Prix: %.2f\n",
               inventory[i].id, inventory[i].name,
               inventory[i].quantity, inventory[i].price);
    }
}

// Mettre à jour la quantité d'un produit
void updateQuantity() {
    char input[50];

    printf("Entrez l'ID du produit: ");
    safeInput(input, sizeof(input));
    int id = atoi(input);

    int index = findProductIndex(id);
    if (index == -1) {
        printf("Produit non trouvé !\n");
        return;
    }

    printf("Produit sélectionné : %s\n", inventory[index].name);
    if (!confirmContinue()) return;

    printf("Entrez la nouvelle quantité: ");
    safeInput(input, sizeof(input));
    inventory[index].quantity = atoi(input);
    printf("Nouvelle quantité : %d\n", inventory[index].quantity);
    if (!confirmContinue()) return;

    saveToFile();
    printf("Quantité mise à jour avec succès !\n");
}

// Rechercher un produit par ID
void searchProduct() {
    char input[50];

    printf("Entrez l'ID du produit: ");
    safeInput(input, sizeof(input));
    int id = atoi(input);

    int index = findProductIndex(id);
    if (index == -1) {
        printf("Produit non trouvé !\n");
        return;
    }

    printf("ID: %d | Nom: %s | Quantité: %d | Prix: %.2f\n",
           inventory[index].id, inventory[index].name,
           inventory[index].quantity, inventory[index].price);
    if (!confirmContinue()) return;
}

// Supprimer un produit
void deleteProduct() {
    char input[50];

    printf("Entrez l'ID du produit à supprimer: ");
    safeInput(input, sizeof(input));
    int id = atoi(input);

    int index = findProductIndex(id);
    if (index == -1) {
        printf("Produit non trouvé !\n");
        return;
    }

    printf("Produit à supprimer : %s\n", inventory[index].name);
    if (!confirmContinue()) return;

    for (int i = index; i < productCount - 1; i++) {
        inventory[i] = inventory[i + 1];
    }

    productCount--;
    saveToFile();
    printf("Produit supprimé avec succès !\n");
}

// Fonction principale
int main() {
    loadFromFile(); // Charger les données au démarrage

    char input[50];
    int choice;

    do {
        displayMenu();
        fgets(input, sizeof(input), stdin);
        input[strcspn(input, "\n")] = '\0';
        choice = atoi(input);

        switch (choice) {
            case 1:
                addProduct();
                break;
            case 2:
                displayAllProducts();
                break;
            case 3:
                updateQuantity();
                break;
            case 4:
                searchProduct();
                break;
            case 5:
                deleteProduct();
                break;
            case 6:
                resetStockFile();
                break;
            case 7:
                printf("Au revoir !\n");
                break;
            default:
                printf("Option invalide. Réessayez.\n");
        }
    } while (choice != 7);

    return 0;
}